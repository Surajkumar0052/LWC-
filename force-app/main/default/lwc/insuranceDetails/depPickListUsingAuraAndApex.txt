CMP : 



<aura:component controller="DependentPicklistController"  implements="flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId" access="global" >
    <aura:handler name="init" value="{!this}" action="{!c.doInit}" />
    <aura:handler name="init" value="{!this}" action="{!c.doInit1}" />
    <!-- aura attributes--> 
    <aura:attribute name="parentList" type="list" default="[]" description=""/>
    <aura:attribute name="childList" type="list" default="[]"/>
    <aura:attribute name="pickListMap" type="map"/>
    
    <aura:attribute name="objectName" type="string" default="Region__c"/>
    <aura:attribute name="parentFieldAPI" type="string" default="Regions__c"/>
    <aura:attribute name="childFieldAPI" type="string" default="Zone__c"/>
    <aura:attribute name="parentFieldLabel" type="string" />
    <aura:attribute name="childFieldLabel" type="string"/>
    <aura:attribute name="parentValue" type="string" default=""/>
    <aura:attribute name="childValue" type="string" default=""/>
    
    
    <lightning:card title="Dependent Picklist">
        <!-- Controller Field -->
        <lightning:layoutItem size="12" padding="around-small">    
            <lightning:select name="parentField" aura:id="parentField"
                              value="{!v.parentValue}"
                              label="Region"
                              onchange="{!c.fieldChange}">
                <aura:iteration items="{!v.parentList}" var="value">
                    <option value="{!value}">{!value}</option>
                </aura:iteration>
            </lightning:select>
        </lightning:layoutItem>
        
        <!--Dependent Field-->
        <lightning:layoutItem size="12" padding="around-small">
            <lightning:select name="childField"
                              value="{!v.childValue}"
                              label="Zone"
                              onchange="{!c.fieldChange}">
                <aura:iteration items="{!v.childList}" var="value">
                    <option value="{!value}">{!value}</option>
                </aura:iteration>
            </lightning:select>
        </lightning:layoutItem>
        
        
        
        <lightning:button variant="Neutral" label="Save" title="Base action" onclick="{!c.handleClick}" />
    </lightning:card>
</aura:component>


=========================================================================================================================================

Controller-Js : 

({
    doInit : function(component, event, helper) {
        
        var action = component.get("c.getDependentPicklist");
        
        action.setCallback(this, function(response){
            var status = response.getState();
            if(status === "SUCCESS"){
                var pickListResponse = response.getReturnValue();
                
                //save response 
                component.set("v.pickListMap",pickListResponse.pickListMap);
                component.set("v.parentFieldLabel",pickListResponse.parentFieldLabel);
                component.set("v.childFieldLabel",pickListResponse.childFieldLabel);
                
                // create a empty array for store parent picklist values 
                var parentkeys = []; // for store all map keys 
                var parentField = []; // for store parent picklist value to set on lightning:select. 
                
                // Iterate over map and store the key
                for (var pickKey in pickListResponse.pickListMap) {
                    parentkeys.push(pickKey);
                }
                
                //set the parent field value for lightning:select
                if (parentkeys != undefined && parentkeys.length > 0) {
                    parentField.push('--- None ---');
                }
                
                for (var i = 0; i < parentkeys.length; i++) {
                    parentField.push(parentkeys[i]);
                }  
                // set the parent picklist
                component.set("v.parentList", parentField);
                
            }
        });
        
        $A.enqueueAction(action);
        
        
    },
    doInit1 : function(component, event, helper) {
        var recId = component.get("v.recordId");
        console.log('recIdd : ' + recId);         
        var action = component.get('c.getRegionRecord'); 
        // method name i.e. getEntity should be same as defined in apex class
        // params name i.e. entityType should be same as defined in getEntity method
        action.setParams({
            "Id" : component.get('v.recordId') 
        });
        action.setCallback(this, function(a){
            var state = a.getState(); // get the response state
            if(state == 'SUCCESS') {
                //component.set('v.sObjList', a.getReturnValue());
                console.log('parent val : ' + JSON.stringify(a.getReturnValue().Regions__c));
                component.set('v.parentValue', a.getReturnValue().Regions__c);
                console.log('child val : ' + JSON.stringify(a.getReturnValue().Zone__c));
                //component.set('v.childValue', a.getReturnValue().Zone__c);
            }
            else if(state != 'SUCCESS'){
                var toastEvent = $A.get("e.force:showToast");
                toastEvent.setParams({
                    title: "Error!",
                    message: event.getParam("message"),
                    type : "Error"
                });
                toastEvent.fire();
            }
        });
        $A.enqueueAction(action);
    },
    
    handleClick : function(component, event, helper){
        const action = component.get("c.updateRecord");
        var recId = component.get("v.recordId");
        var region = component.get("v.parentValue");
        var zone = component.get("v.childValue");
        console.log('recId : ' + recId + 'region : ' + region + 'zone : ' + zone);
        action.setParams({
            "Id" : recId,
            "regValue" : region,
            "zoneValue" : zone
        });
        action.setCallback(this, function(response){
            const state = response.getState();
            if(state == 'SUCCESS'){
                console.log('Update successful');
                $A.get('e.force:refreshView').fire();
                var toastEvent = $A.get("e.force:showToast");
                toastEvent.setParams({
                    title: "Success!",
                    message: "The record is created successfully.",
                    type : "Success"
                });
                toastEvent.fire();
            }
        });
        $A.enqueueAction(action);
        
    },
    
    
    fieldChange : function(component, event, helper) {
        var recId = component.get("v.recordId");
        console.log('recId : ' + recId); 
        var zone = component.get("v.childValue");
        console.log('zone : ' + zone); 
        var region = component.get("v.parentValue");
        console.log('region : ' + region); 
        $A.get('e.force:refreshView').fire();
        var controllerValue = component.find("parentField").get("v.value");// We can also use event.getSource().get("v.value")
        var pickListMap = component.get("v.pickListMap");
        
        if (controllerValue != '--- None ---') {
            //get child picklist value
            var childValues = pickListMap[controllerValue];
            var childValueList = [];
            childValueList.push('--- None ---');
            for (var i = 0; i < childValues.length; i++) {
                childValueList.push(childValues[i]);
            }
            // set the child list
            component.set("v.childList", childValueList);
            
            if(childValues.length > 0){
                component.set("v.disabledChildField" , false);  
            }else{
                component.set("v.disabledChildField" , true); 
            }
            
        } else {
            component.set("v.childList", ['--- None ---']);
            component.set("v.disabledChildField" , true);
        }
    }
    
})


===============================================================================================================================================

APEX : 



public with sharing class DependentPicklistController {
	private static final String base64Chars = '' +
        'ABCDEFGHIJKLMNOPQRSTUVWXYZ' +
        'abcdefghijklmnopqrstuvwxyz' +
        '0123456789+/';
    
    
    @AuraEnabled
    public static Region__c getRegionRecord(String Id){
        Region__c region = [SELECT Id, Regions__c, Zone__c FROM Region__c WHERE Id =: Id];
        return region;
    }
    
    @AuraEnabled
    public static String updateRecord(String Id, String regValue, String zoneValue){
        Region__c region = new Region__c(Id = Id, Regions__c = regValue, Zone__c = zoneValue);
        System.debug('region : ' + region);
        upsert region;
        return 'success';
    }
    
    @AuraEnabled 
    public static PicklistWrapper getDependentPicklist() {
        Map<String,List<String>> pickListMap = new Map<String,List<String>>();
        PicklistWrapper pw = new PicklistWrapper();
        pw.pickListMap = pickListMap;
        
        if (Schema.getGlobalDescribe().get('Region__c') ==null || String.isBlank('Regions__c') || String.isBlank('Zone__c')){
            return pw;
        }
 
        Schema.sObjectType objType = Schema.getGlobalDescribe().get('Region__c').newSObject().getSObjectType();
        Map<String, Schema.SObjectField> objFieldMap = objType.getDescribe().fields.getMap();
        
        if (!objFieldMap.containsKey('Regions__c') || !objFieldMap.containsKey('Zone__c')){
            return pw;     
        }
        
        List<PicklistEntryWrapper> depEntries = (List<PicklistEntryWrapper>)JSON.deserialize(JSON.serialize(objFieldMap.get('Zone__c').getDescribe().getPicklistValues()), List<PicklistEntryWrapper>.class);
        List<String> controllingValues = new List<String>();
        
        for (Schema.PicklistEntry ple : objFieldMap.get('Regions__c').getDescribe().getPicklistValues()) {
            pickListMap.put(ple.getLabel(), new List<String>());
            controllingValues.add(ple.getLabel());
        }
        
        for (PicklistEntryWrapper plew : depEntries) {
            String validForBits = base64ToBits(plew.validFor);
            for (Integer i = 0; i < validForBits.length(); i++) {
                String bit = validForBits.mid(i, 1);
                if (bit == '1') {
                    pickListMap.get(controllingValues.get(i)).add(plew.label);
                }
            }
        }
        
        pw.pickListMap = pickListMap;

        System.debug('pickListMap : ' + pickListMap);
        return pw;
    }
    
    //Refer from here https://salesforce.stackexchange.com/questions/4462/get-lists-of-dependent-picklist-options-in-apex
    public static String decimalToBinary(Integer val) {
        String bits = '';
        while (val > 0) {
            Integer remainder = Math.mod(val, 2);
            val = Integer.valueOf(Math.floor(val / 2));
            bits = String.valueOf(remainder) + bits;
        }
        return bits;
    }
    
    public static String base64ToBits(String validFor) {
        if (String.isEmpty(validFor)) return '';
        
        String validForBits = '';
        
        for (Integer i = 0; i < validFor.length(); i++) {
            String thisChar = validFor.mid(i, 1);
            Integer val = base64Chars.indexOf(thisChar);
            String bits = decimalToBinary(val).leftPad(6, '0');
            validForBits += bits;
        }
        
        return validForBits;
    }
    
    public class PicklistWrapper{
    	@AuraEnabled
        public Map<String, List<String>> pickListMap;
           
    }
        
    public class PicklistEntryWrapper{
        public String active;
        public String defaultValue;
        public String label;
        public String value;
        public String validFor;
        
    }
}